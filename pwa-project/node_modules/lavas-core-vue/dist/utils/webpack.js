'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.enableHotReload = exports.writeFileInDev = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

/**
 * write files to disk in dev mode
 *
 * @param {string} path file path
 * @param {string} content file content
 */
let writeFileInDev = exports.writeFileInDev = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (path, content) {
        yield (0, _fsExtra.outputFile)(path, content, 'utf8');

        /**
         * hack for watchpack, solve the rebuilding problem in dev mode
         * https://github.com/webpack/watchpack/issues/25#issuecomment-287789288
         */
        let then = Date.now() / 1000 - 10;
        yield (0, _fsExtra.utimes)(path, then, then);
    });

    return function writeFileInDev(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

/**
 * add support for hot reload, such as adding plugins and modifying every entry
 *
 * @param {string} dir directory for hot-reload.js
 * @param {Object} config webpack config
 * @param {boolean} subscribeReload whether subscribe reload action
 */


let enableHotReload = exports.enableHotReload = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (dir, config, subscribeReload = false) {
        let hotReloadEntryTemplate = (0, _path.join)(__dirname, '../templates/entry-hot-reload.tmpl');
        let hotReloadEntryPath = (0, _path.join)(dir, `${config.name}-hot-reload.js`);
        let templateContent = (0, _lodash2.default)((yield (0, _fsExtra.readFile)(hotReloadEntryTemplate, 'utf8')))({
            compilerName: config.name,
            subscribeReload
        });

        // generate .lavas/xxx-hot-reload.js
        yield writeFileInDev(hotReloadEntryPath, templateContent);

        // add hot-reload entry in every entry
        (0, _keys2.default)(config.entryPoints.entries()).forEach(function (entryKey) {
            config.entryPoints.get(entryKey).prepend(hotReloadEntryPath);
        });

        // add relative plugins
        config.plugin('hot-module-replacement').use(_webpack2.default.HotModuleReplacementPlugin).end().plugin('no-emit-on-errors').use(_webpack2.default.NoEmitOnErrorsPlugin);
    });

    return function enableHotReload(_x3, _x4) {
        return _ref2.apply(this, arguments);
    };
})();

/**
 * remove templatedPath which contains [hash] [chunkhash] and [contenthash] in filenames
 *
 * @param {string} path original path
 * @return {string} path path without templated path
 */


exports.webpackCompile = webpackCompile;
exports.removeTemplatedPath = removeTemplatedPath;

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _path = require('path');

var _fsExtra = require('fs-extra');

var _lodash = require('lodash.template');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * start to compile with webpack, record the errors & warnings in process
 *
 * @param {Object|Array} config webpack config
 * @param {Object?} statsConfig config for showing webpack stats
 * @return {Promise} promise
 */
/**
 * @file utils.webpack.js
 * @author lavas
 */
function webpackCompile(config, statsConfig) {
    return new _promise2.default((resolve, reject) => {
        (0, _webpack2.default)(config, (err, stats) => {
            if (err) {
                console.error(err.stack || err);
                if (err.details) {
                    err.details.forEach(detail => console.error(detail));
                }
                reject(err);
                return;
            }

            const info = stats.toJson();

            if (stats.hasErrors()) {
                info.errors.forEach(error => console.error(error));
                reject(info.errors);
                return;
            }

            if (stats.hasWarnings()) {
                info.warnings.forEach(warning => console.warn(warning));
            }

            /**
             * output stats info if a config is provided
             * https://doc.webpack-china.org/configuration/stats/
             */
            if (statsConfig) {
                console.log('\n' + stats.toString(statsConfig));
            }

            resolve();
        });
    });
}function removeTemplatedPath(path) {
    return path.replace(/\[(chunkhash|contenthash|hash)(:\d?)?\]\./g, '');
}