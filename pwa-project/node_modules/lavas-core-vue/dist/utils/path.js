'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.distLavasPath = distLavasPath;
exports.assetsPath = assetsPath;
exports.resolveAliasPath = resolveAliasPath;
exports.isFromCDN = isFromCDN;
exports.removeTrailingSlash = removeTrailingSlash;
exports.camelCaseToDash = camelCaseToDash;

var _path = require('path');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * concat with lavas dir
 *
 * @param {string} rootDir rootDir
 * @param {string} path path
 * @return {string} resolved path
 */
/**
 * @file utils.path.js
 * @author lavas
 */
function distLavasPath(rootDir, path) {
  return (0, _path.join)(rootDir, _constants.LAVAS_DIRNAME_IN_DIST, path);
}

/**
 * generate a relative path based on config
 * eg. static/js/[name].[hash].js
 *
 * @param {string} path source path
 * @return {string} relative path
 */
function assetsPath(path) {
  return _path.posix.join(_constants.ASSETS_DIRNAME_IN_DIST, path);
}

/**
 * resolve path with webpack alias
 *
 * @param {Object} alias alias object
 * @param {string} path path starts with alias
 * @return {string} resolved path
 */
function resolveAliasPath(alias, path) {
  let matchedAliasKey = (0, _keys2.default)(alias).find(aliasKey => path.startsWith(aliasKey));
  return matchedAliasKey ? (0, _path.join)(alias[matchedAliasKey], path.substring(matchedAliasKey.length)) : path;
}

/**
 * whether the publicPath is from cdn
 *
 * @param {string} publicPath publicPath
 * @return {boolean} is from cdn
 */
function isFromCDN(publicPath) {
  return publicPath.startsWith('http://') || publicPath.startsWith('https://') || publicPath.startsWith('//');
}

/**
 * remove trailing slash
 *
 * @param {string} base base
 * @return {string} base without trailing slash
 */
function removeTrailingSlash(base) {
  return base.endsWith('/') ? base.substring(0, base.length - 1) : base;
}

/**
 * convert camelcase to dash
 *
 * borrow from https://gist.github.com/youssman/745578062609e8acac9f
 *
 * @param {string} str string in camel case
 * @return {string} dash string
 */
function camelCaseToDash(str) {
  return str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
}