'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _memoryFs = require('memory-fs');

var _memoryFs2 = _interopRequireDefault(_memoryFs);

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _fsExtra = require('fs-extra');

var _path = require('path');

var _lodash = require('lodash');

var _connectHistoryApiFallback = require('connect-history-api-fallback');

var _connectHistoryApiFallback2 = _interopRequireDefault(_connectHistoryApiFallback);

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _vueSkeletonWebpackPlugin = require('vue-skeleton-webpack-plugin');

var _vueSkeletonWebpackPlugin2 = _interopRequireDefault(_vueSkeletonWebpackPlugin);

var _constants = require('../constants');

var _webpack3 = require('../utils/webpack');

var _path2 = require('../utils/path');

var _logger = require('../utils/logger');

var _logger2 = _interopRequireDefault(_logger);

var _baseBuilder = require('./base-builder');

var _baseBuilder2 = _interopRequireDefault(_baseBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DevBuilder extends _baseBuilder2.default {
    constructor(core) {
        super(core);
        // chokidar watchers
        this.watchers = [];

        // webpack-dev-middleware
        this.devMiddleware = null;

        // server webpack watch
        this.serverWatching = null;

        // override writeFile function
        this.writeFile = _webpack3.writeFileInDev;

        this.sharedCache = {};
    }

    /**
     * process lavas config
     *
     * @param {Object} config lavas config
     */
    processConfig(config) {
        // in dev mode, ignore CDN publicPath and use default '/' instead.
        config.build.publicPath = (0, _path2.isFromCDN)(config.build.publicPath) ? '/' : config.build.publicPath;

        /**
         * in dev mode, remove templatedPath which contains [hash] [chunkhash] and [contenthash] in filenames
         * https://github.com/webpack/webpack/issues/1914#issuecomment-174171709
         */
        (0, _keys2.default)(config.build.filenames).forEach(key => {
            config.build.filenames[key] = (0, _webpack3.removeTemplatedPath)(config.build.filenames[key]);
        });
    }

    /**
     * set chokidar watchers, following directories and files will be watched:
     * /pages, /config, /core/index.html.tmpl
     *
     * @param {string|Array.<string>} paths paths
     * @param {string|Array.<string>} events events
     * @param {Function} callback callback
     */
    addWatcher(paths, events, callback) {
        if (!Array.isArray(events)) {
            events = [events];
        }
        let watcher = _chokidar2.default.watch(paths, { ignoreInitial: true });
        events.forEach(event => {
            watcher.on(event, callback);
        });
        this.watchers.push(watcher);
    }

    reloadClient() {
        // publish reload event to old client
        if (this.oldHotMiddleware) {
            this.oldHotMiddleware.publish({
                action: 'reload'
            });
        }
    }

    /**
     * reload global config
     */
    startRebuild() {
        console.log('[Lavas] config changed, start rebuilding...');
        this.core.emit('start-rebuild');
    }

    /**
     * add skeleton routes in development mode
     *
     * @param {Object} clientConfig webpack client config
     */
    addSkeletonRoutes(clientConfig) {
        let { globals, build } = this.config;
        let skeletonRelativePath = build.skeleton && build.skeleton.path || _constants.DEFAULT_SKELETON_PATH;
        clientConfig.module.rules.push(_vueSkeletonWebpackPlugin2.default.loader({
            resource: [(0, _path.join)(globals.rootDir, '.lavas/router')],
            options: {
                entry: [_constants.DEFAULT_ENTRY_NAME],
                importTemplate: `import [nameHash] from '@/${skeletonRelativePath}';`,
                routePathTemplate: '/skeleton-[name]',
                insertAfter: 'let routes = ['
            }
        }));
    }

    /**
     * watch some directories and files such as /pages, lavas.config.js
     */
    addWatchers() {
        var _this = this;

        let { globals, build } = this.config;

        // use chokidar to rebuild routes
        let pagesDir = (0, _path.join)(globals.rootDir, 'pages');
        let rebuildRoutes = (0, _lodash.debounce)((0, _asyncToGenerator3.default)(function* () {
            yield _this.routeManager.buildRoutes();
        }), 200);
        this.addWatcher(pagesDir, ['add', 'unlink'], rebuildRoutes);

        // watch files provides by user
        if (build.watch) {
            this.addWatcher(build.watch, 'change', this.startRebuild.bind(this));
        }

        // watch lavas.config.js, rebuild whole process
        let configDir = (0, _path.join)(globals.rootDir, _constants.LAVAS_CONFIG_FILE);
        this.addWatcher(configDir, 'change', this.startRebuild.bind(this));
    }

    /**
     * build in development mode
     */
    build() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this2.isDev = true;
            let spaConfig;
            let clientConfig;
            let serverConfig;
            let hotMiddleware;
            let clientCompiler; // compiler for client in ssr and spa
            let serverCompiler; // compiler for server in ssr
            let clientMFS;
            let ssrEnabled = _this2.config.build.ssr;

            _logger2.default.info('build', 'Auto generating routes...', true);
            yield _this2.routeManager.buildRoutes();
            _logger2.default.info('build', 'Auto generating routes complete', true);

            _logger2.default.info('build', 'Writing temp files', true);
            yield _this2.writeRuntimeConfig();
            yield _this2.writeFileToLavasDir(_constants.BUILD_SCRIPT, (0, _fsExtra.readFileSync)((0, _path.join)(__dirname, `../templates/${_constants.BUILD_SCRIPT}`)));
            _logger2.default.info('build', 'Writing temp files complete', true);

            // write middleware.js & store.js
            yield _this2.writeMiddleware();
            yield _this2.writeStore();

            // SSR build process
            if (ssrEnabled) {
                // create config for both client & server side
                clientConfig = yield _this2.createSSRClientConfig();
                serverConfig = yield _this2.createSSRServerConfig();
                let serverMFS = new _memoryFs2.default();

                // pass addWatcher & reloadClient to renderer
                _this2.renderer.addWatcher = _this2.addWatcher.bind(_this2);
                _this2.renderer.reloadClient = _this2.reloadClient.bind(_this2);
                yield _this2.renderer.build(clientConfig, serverConfig);
                _this2.renderer.serverMFS = serverMFS;

                serverCompiler = (0, _webpack2.default)(serverConfig);
                serverCompiler.outputFileSystem = serverMFS;

                _this2.serverWatching = serverCompiler.watch({}, (() => {
                    var _ref2 = (0, _asyncToGenerator3.default)(function* (err, stats) {
                        if (err) {
                            throw err;
                        }
                        stats = stats.toJson();
                        if (stats.errors.length) {
                            for (let error of stats.errors) {
                                console.error(error);
                            }
                            return;
                        }
                        yield _this2.renderer.refreshFiles();
                    });

                    return function (_x, _x2) {
                        return _ref2.apply(this, arguments);
                    };
                })());
            }
            // SPA build process
            else {
                    // create spa config first
                    spaConfig = yield _this2.createSPAConfig();
                }

            // create a compiler based on spa config
            clientCompiler = (0, _webpack2.default)([clientConfig, spaConfig].filter(function (config) {
                return config;
            }));
            clientCompiler.cache = _this2.sharedCache;

            // prefix all the assets paths with publicPath in MFS
            _this2.devMiddleware = (0, _webpackDevMiddleware2.default)(clientCompiler, {
                publicPath: _this2.config.build.publicPath,
                noInfo: true,
                stats: false,
                logLevel: 'silent'
            });

            // set memory-fs used by devMiddleware
            clientMFS = _this2.devMiddleware.fileSystem;
            clientCompiler.outputFileSystem = clientMFS;
            if (ssrEnabled) {
                _this2.renderer.clientMFS = clientMFS;
            }

            hotMiddleware = (0, _webpackHotMiddleware2.default)(clientCompiler, {
                heartbeat: 2500,
                log: false
            });
            /**
             * TODO: hot reload for html
             * html-webpack-plugin has a problem with webpack 3.x.
             * the relative ISSUE: https://github.com/vuejs-templates/webpack/issues/751#issuecomment-309955295
             *
             * before the problem solved, there's no page reload
             * when the html-webpack-plugin template changes in webpack 3.x
             */
            clientCompiler.plugin('compilation', function (compilation) {
                compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {
                    // trigger reload action, which will be used in hot-reload-client.js
                    hotMiddleware.publish({
                        action: 'reload'
                    });
                    cb();
                });
            });

            /**
             * add html history api support:
             * in spa, we use connect-history-api-fallback middleware
             * in ssr, ssr middleware will handle it instead
             */
            if (!ssrEnabled) {
                /**
                 * we should put this middleware in front of dev middleware since
                 * it will rewrite req.url to xxx.html based on options.rewrites
                 */
                let historyConfig = {
                    htmlAcceptHeaders: ['text/html'],
                    disableDotRule: false, // ignore paths with dot inside
                    // verbose: true,
                    index: `${_this2.config.build.publicPath}${_constants.DEFAULT_ENTRY_NAME}.html`
                };

                _this2.core.middlewareComposer.add((0, _connectHistoryApiFallback2.default)(historyConfig));
            }

            // add dev & hot-reload middlewares
            _this2.core.middlewareComposer.add(_this2.devMiddleware);
            _this2.core.middlewareComposer.add(hotMiddleware);

            // wait until webpack building finished
            yield new _promise2.default(function (resolve) {
                _this2.devMiddleware.waitUntilValid((0, _asyncToGenerator3.default)(function* () {
                    if (ssrEnabled) {
                        yield _this2.renderer.refreshFiles();
                    }

                    // publish reload event to old client
                    if (_this2.oldHotMiddleware) {
                        _this2.oldHotMiddleware.publish({
                            action: 'reload'
                        });
                    }
                    // save current hotMiddleware
                    _this2.oldHotMiddleware = hotMiddleware;
                    resolve();
                }));
            });

            _this2.addWatchers();
        })();
    }

    /**
     * close watchers and some middlewares before rebuild
     *
     */
    close() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            // close chokidar watchers
            if (_this3.watchers && _this3.watchers.length) {
                _this3.watchers.forEach(function (watcher) {
                    watcher.close();
                });
                _this3.watchers = [];
            }
            // close devMiddleware
            if (_this3.devMiddleware) {
                yield new _promise2.default(function (resolve) {
                    _this3.devMiddleware.close(function () {
                        return resolve();
                    });
                });
            }
            // stop serverCompiler watching in ssr mode
            if (_this3.serverWatching) {
                yield new _promise2.default(function (resolve) {
                    _this3.serverWatching.close(function () {
                        return resolve();
                    });
                });
                _this3.serverWatching = null;
            }
        })();
    }
}
exports.default = DevBuilder; /**
                               * @file DevBuilder
                               * @author lavas
                               */

module.exports = exports['default'];